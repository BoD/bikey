// Top-level build file where you can add configuration options common to all sub-projects/modules.
import java.text.SimpleDateFormat

ext.globalProjectName = 'bikey'

// Run './gradlew dependencyUpdates' to see new versions of dependencies
apply plugin: 'com.github.ben-manes.versions'

buildscript {
    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.1'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.14.0'
        classpath 'ca.rmen:lib-french-revolutionary-calendar:1.5.2'
        classpath 'io.fabric.tools:gradle:1.22.1'
    }
}

allprojects {
    repositories {
        mavenLocal()
        jcenter()
        maven { url "https://jitpack.io" }
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencyUpdates.resolutionStrategy = {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'alpha-preview', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject('Release candidate')
                }
            }
        }
    }
    // Force using our version of the support libraries, even for those we don't depend on directly (transitive dependencies)
    configurations.all {
        resolutionStrategy {
            force "com.android.support:appcompat-v7:$supportLibVersion",
                    "com.android.support:cardview-v7:$supportLibVersion",
                    "com.android.support:customtabs:$supportLibVersion",
                    "com.android.support:support-v4:$supportLibVersion",
                    "com.android.support:support-annotations:$supportLibVersion",
                    "com.android.support:percent:$supportLibVersion",
                    "com.android.support:recyclerview-v7:$supportLibVersion"
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}


// Add a 'release' task that increments the build number
def releaseTask = tasks.create(name: 'release', group: 'build')
releaseTask << {
    buildNumberProperties.buildNumber = (buildNumber + 1).toString()
    buildNumberProperties.store(buildNumberFile.newWriter(), null)
}

// Make the 'release' task depend on the 'assembleRelease' task of every subprojects
subprojects {
    tasks.whenTaskAdded { task ->
        if (task.name == 'assembleRelease') {
            releaseTask.dependsOn task
        }
    }
}


// Returns the name of the current git branch
def gitBranch() {
    new ProcessBuilder('git', "--git-dir=${rootDir}/.git", "--work-tree=${rootDir}", 'rev-parse', '--abbrev-ref', 'HEAD').start().text.trim()
}

// Returns the SHA1 of the current git commit
def gitSha1() {
    new ProcessBuilder('git', "--git-dir=${rootDir}/.git", "--work-tree=${rootDir}", 'rev-parse', '--short', 'HEAD').start().text.trim()
}

// Returns the current date/time formatted in UTC
def buildDate() {
    def dateFormat = new SimpleDateFormat('yyyy-MM-dd\'T\'HH:mm\'Z\'')
    dateFormat.setTimeZone(TimeZone.getTimeZone('UTC'))
    return dateFormat.format(new Date())
}

// This only for amusement purposes
def getFrenchDate() {
    def frenchDate = new ca.rmen.lfrc.FrenchRevolutionaryCalendar(Locale.FRENCH, ca.rmen.lfrc.FrenchRevolutionaryCalendar.CalculationMethod.ROMME).getDate(GregorianCalendar.getInstance())
    "Le ${frenchDate.weekdayName} ${frenchDate.dayOfMonth} ${frenchDate.monthName} de l'an ${frenchDate.year}. (${frenchDate.objectTypeName} du jour : ${frenchDate.dayOfYear})"
}

// Build properties
ext.buildProperties = new Properties()
buildProperties.load(new FileInputStream(file('build.properties')))

// Build number
ext.buildNumberFile = file('build.number')
ext.buildNumberProperties = new Properties()
buildNumberProperties.load(new FileInputStream(buildNumberFile))
ext.buildNumber = buildNumberProperties.buildNumber.toInteger()

// Build info
ext.gitBranch = gitBranch()
ext.gitSha1 = gitSha1()
ext.buildDate = buildDate()

// Versions used across modules
ext.compileSdkVersion = 24
ext.targetSdkVersion = 22
ext.buildToolsVersion = '25.0.2'
ext.supportLibVersion = '25.3.1'
ext.playServicesVersion = '10.2.1'
ext.butterknifeVersion = '8.5.1'

// Splash screen
println """\n
====================================\u001B[95m
     _____  ___   ____
 __ / / _ \\/ _ | / __/___  _______ _
/ // / , _/ __ |/ _/_/ _ \\/ __/ _ `/
\\___/_/Â¦_/_/ |_/_/ (_)___/_/  \\_, /
                             /___/
\u001B[0m
Building ${globalProjectName}.

${getFrenchDate()}

rootDir: ${rootDir}
buildDate: ${buildDate}
versionCode: ${buildNumberProperties.buildNumber}
versionName: ${buildProperties.versionName}
gitBranch: ${gitBranch}
gitSha1: ${gitSha1}

====================================
"""
